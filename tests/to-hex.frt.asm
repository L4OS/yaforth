;  --- This is autogenerated on 202403-858993649 from C:\altera\alman\Macro\yaforth\tests\to-hex.frt ---

assign    r14    esp		; Return stack pointer
assign    r11    stack		; Data stack

$fourth    equ    3		    ; Fourth element

$third     equ    2		    ; Third element

$second    equ    1		    ; Second element

function crt0
    load	stack, 0x8000; Set Data stack
    load	esp,   0x7000; Set Return stack
    call	decimal
    call	_main
    send
end

  include    lib/asm/tty/tty.asm
  include    lib/asm/tty/print_dec.asm
  include    lib/asm/emulate/mul.asm

    dq    0x0000000a ; base IP = 00000000
    dq    0x00000000 ; ansi-term IP = 00000001

; --- WORD [2] = :
function cr
    dec   esp, 4
    mov   (esp), r15
; --- WORD [3] = ^push
    load    r6, 10
    dec    stack, 4
    mov    (stack), r6
; --- WORD [4] = emit
    mov    r3, (stack)
    inc    stack, 4
    call   _putchar
; --- WORD [5] = ;
    mov   r15, (esp)
    inc   esp, 4
    return
end

; --- WORD [6] = :
function cells
    dec   esp, 4
    mov   (esp), r15
; --- WORD [7] = ^push
    load    r6, 4
    dec    stack, 4
    mov    (stack), r6
; --- WORD [8] = *
    mov    r0, (stack)
    inc    stack, 4
    mov    r1, (stack)
    call   _mul
    mov    (stack), r2
; --- WORD [9] = ;
    mov   r15, (esp)
    inc   esp, 4
    return
end

; --- WORD [10] = :
function ?
    dec   esp, 4
    mov   (esp), r15
; --- WORD [11] = @
    mov    r6, (stack)
    shl    r6, 2
    mov    r5, (r6)
    mov    (stack), r5
; --- WORD [12] = .
    mov    r0, (stack)
    load   r3, 0x80000000
    and   r3, r0
    je    label_print_1
    neg    r0
    mov    (stack), r0
    load   r3, 45 ; '-'
    call   _putchar
    mov    r0, (stack)
label_print_1:
    call   _print_dec
    load   r3, 32
    call   _putchar
    inc    stack, 4
; --- WORD [13] = ;
    mov   r15, (esp)
    inc   esp, 4
    return
end

; --- WORD [14] = :
function decimal
    dec   esp, 4
    mov   (esp), r15
; --- WORD [15] = ^push
    load    r6, 10
    dec    stack, 4
    mov    (stack), r6
; --- WORD [16] = ^push
    load    r6, 0
    dec    stack, 4
    mov    (stack), r6
; --- WORD [17] = !
    mov    r6, (stack)
    inc    stack, 4
    mov    r5, (stack)
    shl    r6, 2
    mov    (r6), r5
; --- WORD [18] = ;
    mov   r15, (esp)
    inc   esp, 4
    return
end

; --- WORD [19] = :
function hex
    dec   esp, 4
    mov   (esp), r15
; --- WORD [20] = ^push
    load    r6, 16
    dec    stack, 4
    mov    (stack), r6
; --- WORD [21] = ^push
    load    r6, 0
    dec    stack, 4
    mov    (stack), r6
; --- WORD [22] = !
    mov    r6, (stack)
    inc    stack, 4
    mov    r5, (stack)
    shl    r6, 2
    mov    (r6), r5
; --- WORD [23] = ;
    mov   r15, (esp)
    inc   esp, 4
    return
end

; --- WORD [24] = :
function octal
    dec   esp, 4
    mov   (esp), r15
; --- WORD [25] = ^push
    load    r6, 8
    dec    stack, 4
    mov    (stack), r6
; --- WORD [26] = ^push
    load    r6, 0
    dec    stack, 4
    mov    (stack), r6
; --- WORD [27] = !
    mov    r6, (stack)
    inc    stack, 4
    mov    r5, (stack)
    shl    r6, 2
    mov    (r6), r5
; --- WORD [28] = ;
    mov   r15, (esp)
    inc   esp, 4
    return
end

; --- WORD [29] = :
function GN2
    dec   esp, 4
    mov   (esp), r15
; --- WORD [30] = ^push
    load    r6, 0
    dec    stack, 4
    mov    (stack), r6
; --- WORD [31] = @
    mov    r6, (stack)
    shl    r6, 2
    mov    r5, (r6)
    mov    (stack), r5
; --- WORD [32] = >r
    mov    r0, (stack)
    inc    stack, 4
    dec    esp, 4
    mov    (esp), r0
; --- WORD [33]
    call    hex
; --- WORD [34] = ^push
    load    r6, 0
    dec    stack, 4
    mov    (stack), r6
; --- WORD [35] = @
    mov    r6, (stack)
    shl    r6, 2
    mov    r5, (r6)
    mov    (stack), r5
; --- WORD [36]
    call    decimal
; --- WORD [37] = ^push
    load    r6, 0
    dec    stack, 4
    mov    (stack), r6
; --- WORD [38] = @
    mov    r6, (stack)
    shl    r6, 2
    mov    r5, (r6)
    mov    (stack), r5
; --- WORD [39] = r>
    mov    r0, (esp)
    inc    esp, 4
    dec    stack, 4
    mov    (stack), r0
; --- WORD [40] = ^push
    load    r6, 0
    dec    stack, 4
    mov    (stack), r6
; --- WORD [41] = !
    mov    r6, (stack)
    inc    stack, 4
    mov    r5, (stack)
    shl    r6, 2
    mov    (r6), r5
; --- WORD [42] = ;
    mov   r15, (esp)
    inc   esp, 4
    return
end

; --- WORD [43] = :
function .h
    dec   esp, 4
    mov   (esp), r15
; --- WORD [44]
    call    GN2
; --- WORD [45] = swap
    mov    r6, stack.second
    mov    r5, (stack)
    mov    (stack), r6
    mov    stack.second, r5
; --- WORD [46] = ^push
    load    r6, 0
    dec    stack, 4
    mov    (stack), r6
; --- WORD [47] = !
    mov    r6, (stack)
    inc    stack, 4
    mov    r5, (stack)
    shl    r6, 2
    mov    (r6), r5
; --- WORD [48] = swap
    mov    r6, stack.second
    mov    r5, (stack)
    mov    (stack), r6
    mov    stack.second, r5
; --- WORD [49] = .
    mov    r0, (stack)
    load   r3, 0x80000000
    and   r3, r0
    je    label_print_2
    neg    r0
    mov    (stack), r0
    load   r3, 45 ; '-'
    call   _putchar
    mov    r0, (stack)
label_print_2:
    call   _print_dec
    load   r3, 32
    call   _putchar
    inc    stack, 4
; --- WORD [50] = ^push
    load    r6, 0
    dec    stack, 4
    mov    (stack), r6
; --- WORD [51] = !
    mov    r6, (stack)
    inc    stack, 4
    mov    r5, (stack)
    shl    r6, 2
    mov    (r6), r5
; --- WORD [52] = ;
    mov   r15, (esp)
    inc   esp, 4
    return
end

; --- WORD [53] = :
function _main_
    dec   esp, 4
    mov   (esp), r15
; --- WORD [54] = ."
    lea   r1, $textline_1
    call   _puts
; --- WORD [55]
    call    cr
; --- WORD [56] = ."
    lea   r1, $textline_2
    call   _puts
; --- WORD [57] = ^push
    load    r6, 33
    dec    stack, 4
    mov    (stack), r6
; --- WORD [58] = dup
    mov    r6, (stack)
    dec    stack, 4
    mov    (stack), r6
; --- WORD [59] = .
    mov    r0, (stack)
    load   r3, 0x80000000
    and   r3, r0
    je    label_print_3
    neg    r0
    mov    (stack), r0
    load   r3, 45 ; '-'
    call   _putchar
    mov    r0, (stack)
label_print_3:
    call   _print_dec
    load   r3, 32
    call   _putchar
    inc    stack, 4
; --- WORD [60] = ."
    lea   r1, $textline_3
    call   _puts
; --- WORD [61]
    call    .h
; --- WORD [62]
    call    cr
; --- WORD [63] = ."
    lea   r1, $textline_4
    call   _puts
; --- WORD [64] = ^push
    load    r6, 14
    dec    stack, 4
    mov    (stack), r6
; --- WORD [65] = ^push
    load    r6, 15
    dec    stack, 4
    mov    (stack), r6
; --- WORD [66] = +
    mov    r5, (stack)
    inc    stack, 4
    mov    r6, (stack)
    clc
    addc   r6, r5
    mov    (stack), r6
; --- WORD [67] = dup
    mov    r6, (stack)
    dec    stack, 4
    mov    (stack), r6
; --- WORD [68] = .
    mov    r0, (stack)
    load   r3, 0x80000000
    and   r3, r0
    je    label_print_4
    neg    r0
    mov    (stack), r0
    load   r3, 45 ; '-'
    call   _putchar
    mov    r0, (stack)
label_print_4:
    call   _print_dec
    load   r3, 32
    call   _putchar
    inc    stack, 4
; --- WORD [69] = ."
    lea   r1, $textline_5
    call   _puts
; --- WORD [70]
    call    .h
; --- WORD [71]
    call    cr
; --- WORD [72] = ."
    lea   r1, $textline_6
    call   _puts
; --- WORD [73] = ^push
    load    r6, 14
    dec    stack, 4
    mov    (stack), r6
; --- WORD [74] = ^push
    load    r6, 15
    dec    stack, 4
    mov    (stack), r6
; --- WORD [75] = *
    mov    r0, (stack)
    inc    stack, 4
    mov    r1, (stack)
    call   _mul
    mov    (stack), r2
; --- WORD [76] = dup
    mov    r6, (stack)
    dec    stack, 4
    mov    (stack), r6
; --- WORD [77] = .
    mov    r0, (stack)
    load   r3, 0x80000000
    and   r3, r0
    je    label_print_5
    neg    r0
    mov    (stack), r0
    load   r3, 45 ; '-'
    call   _putchar
    mov    r0, (stack)
label_print_5:
    call   _print_dec
    load   r3, 32
    call   _putchar
    inc    stack, 4
; --- WORD [78] = ."
    lea   r1, $textline_7
    call   _puts
; --- WORD [79]
    call    .h
; --- WORD [80]
    call    cr
; --- WORD [81] = ."
    lea   r1, $textline_8
    call   _puts
; --- WORD [82] = ^push
    load    r6, 128
    dec    stack, 4
    mov    (stack), r6
; --- WORD [83] = ^push
    load    r6, 64
    dec    stack, 4
    mov    (stack), r6
; --- WORD [84] = +
    mov    r5, (stack)
    inc    stack, 4
    mov    r6, (stack)
    clc
    addc   r6, r5
    mov    (stack), r6
; --- WORD [85] = dup
    mov    r6, (stack)
    dec    stack, 4
    mov    (stack), r6
; --- WORD [86] = .
    mov    r0, (stack)
    load   r3, 0x80000000
    and   r3, r0
    je    label_print_6
    neg    r0
    mov    (stack), r0
    load   r3, 45 ; '-'
    call   _putchar
    mov    r0, (stack)
label_print_6:
    call   _print_dec
    load   r3, 32
    call   _putchar
    inc    stack, 4
; --- WORD [87] = ."
    lea   r1, $textline_9
    call   _puts
; --- WORD [88]
    call    .h
; --- WORD [89]
    call    cr
; --- WORD [90] = ;
    mov   r15, (esp)
    inc   esp, 4
    return
end

; --- WORD [91] = :
function _main
    dec   esp, 4
    mov   (esp), r15
; --- WORD [92]
    call    GN2
; --- WORD [93] = .
    mov    r0, (stack)
    load   r3, 0x80000000
    and   r3, r0
    je    label_print_7
    neg    r0
    mov    (stack), r0
    load   r3, 45 ; '-'
    call   _putchar
    mov    r0, (stack)
label_print_7:
    call   _print_dec
    load   r3, 32
    call   _putchar
    inc    stack, 4
; --- WORD [94] = .
    mov    r0, (stack)
    load   r3, 0x80000000
    and   r3, r0
    je    label_print_8
    neg    r0
    mov    (stack), r0
    load   r3, 45 ; '-'
    call   _putchar
    mov    r0, (stack)
label_print_8:
    call   _print_dec
    load   r3, 32
    call   _putchar
    inc    stack, 4
; --- WORD [95] = ;
    mov   r15, (esp)
    inc   esp, 4
    return
end

$textline_1	db	'==========================Í', 0
$textline_2	db	'Decimal:', 0
$textline_3	db	'Hex:', 0
$textline_4	db	'Decimal:', 0
$textline_5	db	'Hex:', 0
$textline_6	db	'Decimal:', 0
$textline_7	db	'Hex:', 0
$textline_8	db	'Decimal:', 0
$textline_9	db	'Hex:', 0

